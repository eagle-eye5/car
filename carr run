{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import HTML, display\n",
        "\n",
        "html_code = \"\"\"\n",
        "<style>\n",
        "#colab-canvas {\n",
        "    border: 10px solid black;\n",
        "    background: white;\n",
        "}\n",
        "</style>\n",
        "\n",
        "<canvas id=\"colab-canvas\" width=\"1500\" height=\"1300\"></canvas>\n",
        "\n",
        "<script>\n",
        "(function() {\n",
        "    const canvas = document.getElementById('colab-canvas');\n",
        "    const ctx = canvas.getContext('2d');\n",
        "\n",
        "    // Simulation parameters\n",
        "    const config = {\n",
        "        circleRadius: 360,\n",
        "        ballRadius: 8,\n",
        "        carWidth: 40,\n",
        "        carHeight: 20,\n",
        "        acceleration: 0.6,\n",
        "        damping: 1.00,\n",
        "        numBalls: 20,\n",
        "        keys: {},\n",
        "        carFriction: 1.00,\n",
        "        maxSpeed: 15\n",
        "    };\n",
        "\n",
        "    // State objects\n",
        "    const circle = { x: 500, y: 430 };\n",
        "    const balls = [];\n",
        "    const car = {\n",
        "        x: 400, y: 300,\n",
        "        vx: 0, vy: 0,\n",
        "        angle: 0\n",
        "    };\n",
        "\n",
        "    // Initialize balls\n",
        "    function createBalls() {\n",
        "        for(let i = 0; i < config.numBalls; i++) {\n",
        "            balls.push({\n",
        "                x: circle.x + (Math.random() * 2 - 1) * (config.circleRadius - config.ballRadius),\n",
        "                y: circle.y + (Math.random() * 2 - 1) * (config.circleRadius - config.ballRadius),\n",
        "                vx: (Math.random() - 0.5) * 2,\n",
        "                vy: (Math.random() - 0.5) * 2\n",
        "            });\n",
        "        }\n",
        "    }\n",
        "\n",
        "    // Key handling\n",
        "    document.addEventListener('keydown', (e) => config.keys[e.key] = true);\n",
        "    document.addEventListener('keyup', (e) => config.keys[e.key] = false);\n",
        "\n",
        "    function updatePhysics() {\n",
        "        // Car controls\n",
        "        let ax = 0, ay = 0;\n",
        "        if (config.keys['d']) ax += config.acceleration;\n",
        "        if (config.keys['a']) ax -= config.acceleration;\n",
        "        if (config.keys['w']) ay -= config.acceleration;\n",
        "        if (config.keys['s']) ay += config.acceleration;\n",
        "\n",
        "        // Update car velocity\n",
        "        car.vx += ax;\n",
        "        car.vy += ay;\n",
        "\n",
        "        // Apply friction and speed limit\n",
        "        car.vx *= config.carFriction;\n",
        "        car.vy *= config.carFriction;\n",
        "        car.vx = Math.max(-config.maxSpeed, Math.min(config.maxSpeed, car.vx));\n",
        "        car.vy = Math.max(-config.maxSpeed, Math.min(config.maxSpeed, car.vy));\n",
        "\n",
        "        // Update car position\n",
        "        car.x += car.vx;\n",
        "        car.y += car.vy;\n",
        "\n",
        "        // Calculate car angle\n",
        "        if (car.vx !== 0 || car.vy !== 0) {\n",
        "            car.angle = Math.atan2(car.vy, car.vx);\n",
        "        }\n",
        "\n",
        "        // Keep car within circle\n",
        "        const dxCar = car.x - circle.x;\n",
        "        const dyCar = car.y - circle.y;\n",
        "        const distCar = Math.sqrt(dxCar*dxCar + dyCar*dyCar);\n",
        "        const maxCarDist = config.circleRadius - (Math.sqrt(config.carWidth**2 + config.carHeight**2)/2);\n",
        "        if (distCar > maxCarDist) {\n",
        "            const ratio = maxCarDist / distCar;\n",
        "            car.x = circle.x + dxCar * ratio;\n",
        "            car.y = circle.y + dyCar * ratio;\n",
        "        }\n",
        "\n",
        "        // Update balls\n",
        "        balls.forEach(ball => {\n",
        "            // Car-ball collision\n",
        "            const dx = ball.x - car.x;\n",
        "            const dy = ball.y - car.y;\n",
        "            const distance = Math.sqrt(dx*dx + dy*dy);\n",
        "            const minDist = config.ballRadius + Math.max(config.carWidth, config.carHeight)/2;\n",
        "\n",
        "            if (distance < minDist) {\n",
        "                const nx = dx / distance;\n",
        "                const ny = dy / distance;\n",
        "                const pushForce = 2;\n",
        "\n",
        "                ball.vx += nx * pushForce;\n",
        "                ball.vy += ny * pushForce;\n",
        "                car.vx -= nx * pushForce * 0.1;\n",
        "                car.vy -= ny * pushForce * 0.1;\n",
        "            }\n",
        "\n",
        "            // Circle boundary constraints\n",
        "            const dxBall = ball.x - circle.x;\n",
        "            const dyBall = ball.y - circle.y;\n",
        "            const distBall = Math.sqrt(dxBall*dxBall + dyBall*dyBall);\n",
        "            const maxBallDist = config.circleRadius - config.ballRadius;\n",
        "\n",
        "            if (distBall > maxBallDist) {\n",
        "                const nx = dxBall / distBall;\n",
        "                const ny = dyBall / distBall;\n",
        "\n",
        "                // Reflect velocity\n",
        "                const dot = ball.vx * nx + ball.vy * ny;\n",
        "                ball.vx -= 2 * dot * nx;\n",
        "                ball.vy -= 2 * dot * ny;\n",
        "\n",
        "                // Apply damping\n",
        "                ball.vx *= config.damping;\n",
        "                ball.vy *= config.damping;\n",
        "\n",
        "                // Position correction\n",
        "                ball.x = circle.x + nx * maxBallDist;\n",
        "                ball.y = circle.y + ny * maxBallDist;\n",
        "            }\n",
        "\n",
        "            // Update ball position\n",
        "            ball.x += ball.vx;\n",
        "            ball.y += ball.vy;\n",
        "        });\n",
        "    }\n",
        "\n",
        "    function drawCar() {\n",
        "        ctx.save();\n",
        "        ctx.translate(car.x, car.y);\n",
        "        ctx.rotate(car.angle);\n",
        "\n",
        "        // Car body\n",
        "        ctx.fillStyle = '#2ecc71';\n",
        "        ctx.fillRect(-config.carWidth/2, -config.carHeight/2, config.carWidth, config.carHeight);\n",
        "\n",
        "        // Windows\n",
        "        ctx.fillStyle = '#3498db';\n",
        "        ctx.fillRect(-config.carWidth/2 + 5, -config.carHeight/2 + 2, config.carWidth - 10, config.carHeight - 4);\n",
        "\n",
        "        // Wheels\n",
        "        ctx.fillStyle = '#2c3e50';\n",
        "        ctx.beginPath();\n",
        "        ctx.arc(-config.carWidth/3, -config.carHeight/2 - 3, 5, 0, Math.PI*2);\n",
        "        ctx.arc(config.carWidth/3, -config.carHeight/2 - 3, 5, 0, Math.PI*2);\n",
        "        ctx.arc(-config.carWidth/3, config.carHeight/2 + 3, 5, 0, Math.PI*2);\n",
        "        ctx.arc(config.carWidth/3, config.carHeight/2 + 3, 5, 0, Math.PI*2);\n",
        "        ctx.fill();\n",
        "\n",
        "        ctx.restore();\n",
        "    }\n",
        "\n",
        "    function draw() {\n",
        "        // Clear canvas\n",
        "        ctx.fillStyle = 'white';\n",
        "        ctx.fillRect(0, 0, canvas.width, canvas.height);\n",
        "\n",
        "        // Draw circle boundary\n",
        "        ctx.strokeStyle = 'black';\n",
        "        ctx.beginPath();\n",
        "        ctx.arc(circle.x, circle.y, config.circleRadius, 0, Math.PI * 2);\n",
        "        ctx.stroke();\n",
        "\n",
        "        // Draw balls\n",
        "        ctx.fillStyle = 'red';\n",
        "        balls.forEach(ball => {\n",
        "            ctx.beginPath();\n",
        "            ctx.arc(ball.x, ball.y, config.ballRadius, 0, Math.PI * 2);\n",
        "            ctx.fill();\n",
        "        });\n",
        "\n",
        "        // Draw car\n",
        "        drawCar();\n",
        "    }\n",
        "\n",
        "    function gameLoop() {\n",
        "        updatePhysics();\n",
        "        draw();\n",
        "        requestAnimationFrame(gameLoop);\n",
        "    }\n",
        "\n",
        "    // Initialize and start simulation\n",
        "    createBalls();\n",
        "    gameLoop();\n",
        "})();\n",
        "</script>\n",
        "\"\"\"\n",
        "\n",
        "display(HTML(html_code))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "OhkoXxFoRyPM",
        "outputId": "71df2d00-591d-4657-c172-3aafbda18256"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<style>\n",
              "#colab-canvas {\n",
              "    border: 10px solid black;\n",
              "    background: white;\n",
              "}\n",
              "</style>\n",
              "\n",
              "<canvas id=\"colab-canvas\" width=\"1500\" height=\"1300\"></canvas>\n",
              "\n",
              "<script>\n",
              "(function() {\n",
              "    const canvas = document.getElementById('colab-canvas');\n",
              "    const ctx = canvas.getContext('2d');\n",
              "\n",
              "    // Simulation parameters\n",
              "    const config = {\n",
              "        circleRadius: 360,\n",
              "        ballRadius: 8,\n",
              "        carWidth: 40,\n",
              "        carHeight: 20,\n",
              "        acceleration: 0.6,\n",
              "        damping: 1.00,\n",
              "        numBalls: 20,\n",
              "        keys: {},\n",
              "        carFriction: 1.00,\n",
              "        maxSpeed: 15\n",
              "    };\n",
              "\n",
              "    // State objects\n",
              "    const circle = { x: 500, y: 430 };\n",
              "    const balls = [];\n",
              "    const car = {\n",
              "        x: 400, y: 300,\n",
              "        vx: 0, vy: 0,\n",
              "        angle: 0\n",
              "    };\n",
              "\n",
              "    // Initialize balls\n",
              "    function createBalls() {\n",
              "        for(let i = 0; i < config.numBalls; i++) {\n",
              "            balls.push({\n",
              "                x: circle.x + (Math.random() * 2 - 1) * (config.circleRadius - config.ballRadius),\n",
              "                y: circle.y + (Math.random() * 2 - 1) * (config.circleRadius - config.ballRadius),\n",
              "                vx: (Math.random() - 0.5) * 2,\n",
              "                vy: (Math.random() - 0.5) * 2\n",
              "            });\n",
              "        }\n",
              "    }\n",
              "\n",
              "    // Key handling\n",
              "    document.addEventListener('keydown', (e) => config.keys[e.key] = true);\n",
              "    document.addEventListener('keyup', (e) => config.keys[e.key] = false);\n",
              "\n",
              "    function updatePhysics() {\n",
              "        // Car controls\n",
              "        let ax = 0, ay = 0;\n",
              "        if (config.keys['d']) ax += config.acceleration;\n",
              "        if (config.keys['a']) ax -= config.acceleration;\n",
              "        if (config.keys['w']) ay -= config.acceleration;\n",
              "        if (config.keys['s']) ay += config.acceleration;\n",
              "\n",
              "        // Update car velocity\n",
              "        car.vx += ax;\n",
              "        car.vy += ay;\n",
              "\n",
              "        // Apply friction and speed limit\n",
              "        car.vx *= config.carFriction;\n",
              "        car.vy *= config.carFriction;\n",
              "        car.vx = Math.max(-config.maxSpeed, Math.min(config.maxSpeed, car.vx));\n",
              "        car.vy = Math.max(-config.maxSpeed, Math.min(config.maxSpeed, car.vy));\n",
              "\n",
              "        // Update car position\n",
              "        car.x += car.vx;\n",
              "        car.y += car.vy;\n",
              "\n",
              "        // Calculate car angle\n",
              "        if (car.vx !== 0 || car.vy !== 0) {\n",
              "            car.angle = Math.atan2(car.vy, car.vx);\n",
              "        }\n",
              "\n",
              "        // Keep car within circle\n",
              "        const dxCar = car.x - circle.x;\n",
              "        const dyCar = car.y - circle.y;\n",
              "        const distCar = Math.sqrt(dxCar*dxCar + dyCar*dyCar);\n",
              "        const maxCarDist = config.circleRadius - (Math.sqrt(config.carWidth**2 + config.carHeight**2)/2);\n",
              "        if (distCar > maxCarDist) {\n",
              "            const ratio = maxCarDist / distCar;\n",
              "            car.x = circle.x + dxCar * ratio;\n",
              "            car.y = circle.y + dyCar * ratio;\n",
              "        }\n",
              "\n",
              "        // Update balls\n",
              "        balls.forEach(ball => {\n",
              "            // Car-ball collision\n",
              "            const dx = ball.x - car.x;\n",
              "            const dy = ball.y - car.y;\n",
              "            const distance = Math.sqrt(dx*dx + dy*dy);\n",
              "            const minDist = config.ballRadius + Math.max(config.carWidth, config.carHeight)/2;\n",
              "\n",
              "            if (distance < minDist) {\n",
              "                const nx = dx / distance;\n",
              "                const ny = dy / distance;\n",
              "                const pushForce = 2;\n",
              "\n",
              "                ball.vx += nx * pushForce;\n",
              "                ball.vy += ny * pushForce;\n",
              "                car.vx -= nx * pushForce * 0.1;\n",
              "                car.vy -= ny * pushForce * 0.1;\n",
              "            }\n",
              "\n",
              "            // Circle boundary constraints\n",
              "            const dxBall = ball.x - circle.x;\n",
              "            const dyBall = ball.y - circle.y;\n",
              "            const distBall = Math.sqrt(dxBall*dxBall + dyBall*dyBall);\n",
              "            const maxBallDist = config.circleRadius - config.ballRadius;\n",
              "\n",
              "            if (distBall > maxBallDist) {\n",
              "                const nx = dxBall / distBall;\n",
              "                const ny = dyBall / distBall;\n",
              "\n",
              "                // Reflect velocity\n",
              "                const dot = ball.vx * nx + ball.vy * ny;\n",
              "                ball.vx -= 2 * dot * nx;\n",
              "                ball.vy -= 2 * dot * ny;\n",
              "\n",
              "                // Apply damping\n",
              "                ball.vx *= config.damping;\n",
              "                ball.vy *= config.damping;\n",
              "\n",
              "                // Position correction\n",
              "                ball.x = circle.x + nx * maxBallDist;\n",
              "                ball.y = circle.y + ny * maxBallDist;\n",
              "            }\n",
              "\n",
              "            // Update ball position\n",
              "            ball.x += ball.vx;\n",
              "            ball.y += ball.vy;\n",
              "        });\n",
              "    }\n",
              "\n",
              "    function drawCar() {\n",
              "        ctx.save();\n",
              "        ctx.translate(car.x, car.y);\n",
              "        ctx.rotate(car.angle);\n",
              "\n",
              "        // Car body\n",
              "        ctx.fillStyle = '#2ecc71';\n",
              "        ctx.fillRect(-config.carWidth/2, -config.carHeight/2, config.carWidth, config.carHeight);\n",
              "\n",
              "        // Windows\n",
              "        ctx.fillStyle = '#3498db';\n",
              "        ctx.fillRect(-config.carWidth/2 + 5, -config.carHeight/2 + 2, config.carWidth - 10, config.carHeight - 4);\n",
              "\n",
              "        // Wheels\n",
              "        ctx.fillStyle = '#2c3e50';\n",
              "        ctx.beginPath();\n",
              "        ctx.arc(-config.carWidth/3, -config.carHeight/2 - 3, 5, 0, Math.PI*2);\n",
              "        ctx.arc(config.carWidth/3, -config.carHeight/2 - 3, 5, 0, Math.PI*2);\n",
              "        ctx.arc(-config.carWidth/3, config.carHeight/2 + 3, 5, 0, Math.PI*2);\n",
              "        ctx.arc(config.carWidth/3, config.carHeight/2 + 3, 5, 0, Math.PI*2);\n",
              "        ctx.fill();\n",
              "\n",
              "        ctx.restore();\n",
              "    }\n",
              "\n",
              "    function draw() {\n",
              "        // Clear canvas\n",
              "        ctx.fillStyle = 'white';\n",
              "        ctx.fillRect(0, 0, canvas.width, canvas.height);\n",
              "\n",
              "        // Draw circle boundary\n",
              "        ctx.strokeStyle = 'black';\n",
              "        ctx.beginPath();\n",
              "        ctx.arc(circle.x, circle.y, config.circleRadius, 0, Math.PI * 2);\n",
              "        ctx.stroke();\n",
              "\n",
              "        // Draw balls\n",
              "        ctx.fillStyle = 'red';\n",
              "        balls.forEach(ball => {\n",
              "            ctx.beginPath();\n",
              "            ctx.arc(ball.x, ball.y, config.ballRadius, 0, Math.PI * 2);\n",
              "            ctx.fill();\n",
              "        });\n",
              "\n",
              "        // Draw car\n",
              "        drawCar();\n",
              "    }\n",
              "\n",
              "    function gameLoop() {\n",
              "        updatePhysics();\n",
              "        draw();\n",
              "        requestAnimationFrame(gameLoop);\n",
              "    }\n",
              "\n",
              "    // Initialize and start simulation\n",
              "    createBalls();\n",
              "    gameLoop();\n",
              "})();\n",
              "</script>\n"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Welcome To Colab",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}