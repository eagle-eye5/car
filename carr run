from IPython.display import HTML, display

html_code = """
<style>
#colab-canvas {
    border: 10px solid black;
    background: white;
}
</style>

<canvas id="colab-canvas" width="1500" height="1300"></canvas>

<script>
(function() {
    const canvas = document.getElementById('colab-canvas');
    const ctx = canvas.getContext('2d');

    // Simulation parameters
    const config = {
        circleRadius: 360,
        ballRadius: 8,
        carWidth: 40,
        carHeight: 20,
        acceleration: 0.6,
        damping: 1.00,
        numBalls: 20,
        keys: {},
        carFriction: 1.0,
        maxSpeed: 12
    };

    // State objects
    const circle = { x: 500, y: 430 };
    const balls = [];
    const car = {
        x: 400, y: 300,
        vx: 0, vy: 0,
        angle: 0
    };

    // Initialize balls
    function createBalls() {
        for(let i = 0; i < config.numBalls; i++) {
            balls.push({
                x: circle.x + (Math.random() * 2 - 1) * (config.circleRadius - config.ballRadius),
                y: circle.y + (Math.random() * 2 - 1) * (config.circleRadius - config.ballRadius),
                vx: (Math.random() - 0.5) * 2,
                vy: (Math.random() - 0.5) * 2
            });
        }
    }

    // Key handling
    document.addEventListener('keydown', (e) => config.keys[e.key] = true);
    document.addEventListener('keyup', (e) => config.keys[e.key] = false);

    function updatePhysics() {
        // Car controls
        let ax = 0, ay = 0;
        if (config.keys['d'] || config.keys['ArrowRight']) ax += config.acceleration;
if (config.keys['a'] || config.keys['ArrowLeft']) ax -= config.acceleration;
if (config.keys['w'] || config.keys['ArrowUp']) ay -= config.acceleration;
if (config.keys['s'] || config.keys['ArrowDown']) ay += config.acceleration;

        // Update car velocity
        car.vx += ax;
        car.vy += ay;

        // Apply friction and speed limit
        car.vx *= config.carFriction;
        car.vy *= config.carFriction;
        car.vx = Math.max(-config.maxSpeed, Math.min(config.maxSpeed, car.vx));
        car.vy = Math.max(-config.maxSpeed, Math.min(config.maxSpeed, car.vy));

        // Update car position
        car.x += car.vx;
        car.y += car.vy;

        // Calculate car angle
        if (car.vx !== 0 || car.vy !== 0) {
            car.angle = Math.atan2(car.vy, car.vx);
        }

        // Keep car within circle
        const dxCar = car.x - circle.x;
        const dyCar = car.y - circle.y;
        const distCar = Math.sqrt(dxCar*dxCar + dyCar*dyCar);
        const maxCarDist = config.circleRadius - (Math.sqrt(config.carWidth**2 + config.carHeight**2)/2);
        if (distCar > maxCarDist) {
            const ratio = maxCarDist / distCar;
            car.x = circle.x + dxCar * ratio;
            car.y = circle.y + dyCar * ratio;
        }

        // Update balls
        balls.forEach(ball => {
            // Car-ball collision
            const dx = ball.x - car.x;
            const dy = ball.y - car.y;
            const distance = Math.sqrt(dx*dx + dy*dy);
            const minDist = config.ballRadius + Math.max(config.carWidth, config.carHeight)/2;

            if (distance < minDist) {
                const nx = dx / distance;
                const ny = dy / distance;
                const pushForce = 2;

                ball.vx += nx * pushForce;
                ball.vy += ny * pushForce;
                car.vx -= nx * pushForce * 0.1;
                car.vy -= ny * pushForce * 0.1;
            }

            // Circle boundary constraints
            const dxBall = ball.x - circle.x;
            const dyBall = ball.y - circle.y;
            const distBall = Math.sqrt(dxBall*dxBall + dyBall*dyBall);
            const maxBallDist = config.circleRadius - config.ballRadius;

            if (distBall > maxBallDist) {
                const nx = dxBall / distBall;
                const ny = dyBall / distBall;

                // Reflect velocity
                const dot = ball.vx * nx + ball.vy * ny;
                ball.vx -= 2 * dot * nx;
                ball.vy -= 2 * dot * ny;

                // Apply damping
                ball.vx *= config.damping;
                ball.vy *= config.damping;

                // Position correction
                ball.x = circle.x + nx * maxBallDist;
                ball.y = circle.y + ny * maxBallDist;
            }

            // Update ball position
            ball.x += ball.vx;
            ball.y += ball.vy;
        });
    }

    function drawCar() {
        ctx.save();
        ctx.translate(car.x, car.y);
        ctx.rotate(car.angle);

        // Car body
        ctx.fillStyle = '#2ecc71';
        ctx.fillRect(-config.carWidth/2, -config.carHeight/2, config.carWidth, config.carHeight);

        // Windows
        ctx.fillStyle = '#3498db';
        ctx.fillRect(-config.carWidth/2 + 5, -config.carHeight/2 + 2, config.carWidth - 10, config.carHeight - 4);

        // Wheels
        ctx.fillStyle = '#2c3e50';
        ctx.beginPath();
        ctx.arc(-config.carWidth/3, -config.carHeight/2 - 3, 5, 0, Math.PI*2);
        ctx.arc(config.carWidth/3, -config.carHeight/2 - 3, 5, 0, Math.PI*2);
        ctx.arc(-config.carWidth/3, config.carHeight/2 + 3, 5, 0, Math.PI*2);
        ctx.arc(config.carWidth/3, config.carHeight/2 + 3, 5, 0, Math.PI*2);
        ctx.fill();

        ctx.restore();
    }

    function draw() {
        // Clear canvas
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Draw circle boundary
        ctx.strokeStyle = 'black';
        ctx.beginPath();
        ctx.arc(circle.x, circle.y, config.circleRadius, 0, Math.PI * 2);
        ctx.stroke();

        // Draw balls
        ctx.fillStyle = 'red';
        balls.forEach(ball => {
            ctx.beginPath();
            ctx.arc(ball.x, ball.y, config.ballRadius, 0, Math.PI * 2);
            ctx.fill();
        });

        // Draw car
        drawCar();
    }

    function gameLoop() {
        updatePhysics();
        draw();
        requestAnimationFrame(gameLoop);
    }

    // Initialize and start simulation
    createBalls();
    gameLoop();
})();
</script>
"""

display(HTML(html_code))
